// Generated by Apple Swift version 3.0-dev (LLVM 2cb28b32ee, Clang a97e66842c, Swift be55ede0e3)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import CoreGraphics;
@import ObjectiveC;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class UIView;
@class NSLayoutConstraint;
@class NSCoder;
@class UIEvent;

/**
  UITableViewCell subclass.
  This cell used by \code
  ElongationViewController
  \endcode.
  Cell can be expanded and used for transition to \code
  ElongationDetailViewController
  \endcode.
  Can only be configured from ‘.xib’ or Storyboard.
*/
SWIFT_CLASS("_TtC17ElongationPreview14ElongationCell")
@interface ElongationCell : UITableViewCell
/**
  Is this cell in \code
  expanded
  \endcode state.
*/
@property (nonatomic) BOOL isExpanded;
/**
  View on top half of \code
  contentView
  \endcode.
  Add here all the views which wont be scaled and must stay on their position.
*/
@property (nonatomic, strong) IBOutlet UIView * _Null_unspecified topView;
/**
  \code
  height
  \endcode constraint of \code
  topView
  \endcode.
  This constraint will be changed according to \code
  ElongationConfig
  \endcode.
*/
@property (nonatomic, strong) IBOutlet NSLayoutConstraint * _Null_unspecified topViewHeightConstraint;
/**
  \code
  top
  \endcode constraint of \code
  topView
  \endcode.
  This constraint will be changed if \code
  ElongationConfig
  \endcode was configured for using custom separators.
*/
@property (nonatomic, strong) IBOutlet NSLayoutConstraint * _Null_unspecified topViewTopConstraint;
/**
  This is the front view which can be scaled if \code
  scaleFactor
  \endcode was configured in \code
  ElongationConfig
  \endcode.
  Also to this view can be applied ‘parallax’ effect.
*/
@property (nonatomic, strong) IBOutlet UIView * _Null_unspecified scalableView;
/**
  \code
  centerY
  \endcode constraint of view, to which must be applied \code
  parallax
  \endcode effect.
*/
@property (nonatomic, strong) IBOutlet NSLayoutConstraint * _Null_unspecified parallaxViewCenterConstraint;
/**
  \code
  height
  \endcode constraint of view, to which must be applied \code
  parallax
  \endcode effect.
*/
@property (nonatomic, strong) IBOutlet NSLayoutConstraint * _Null_unspecified parallaxViewHeightConstraint;
/**
  The view which comes from behind the cell when you tap on the cell.
*/
@property (nonatomic, strong) IBOutlet UIView * _Null_unspecified bottomView;
/**
  \code
  height
  \endcode constraint of \code
  bottomView
  \endcode.
*/
@property (nonatomic, strong) IBOutlet NSLayoutConstraint * _Null_unspecified bottomViewHeightConstraint;
/**
  \code
  top
  \endcode constraint of \code
  bottomView
  \endcode.
*/
@property (nonatomic, strong) IBOutlet NSLayoutConstraint * _Null_unspecified bottomViewTopConstraint;
/**
  :nodoc:
*/
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event;
@end


@interface ElongationCell (SWIFT_EXTENSION(ElongationPreview))
@end


@interface ElongationCell (SWIFT_EXTENSION(ElongationPreview))
/**
  :nodoc:
*/
- (void)willMoveToSuperview:(UIView * _Nullable)newSuperview;
/**
  :nodoc:
*/
- (void)layoutSubviews;
@end


@interface ElongationCell (SWIFT_EXTENSION(ElongationPreview))
@end


@interface ElongationCell (SWIFT_EXTENSION(ElongationPreview))
@end


@interface ElongationCell (SWIFT_EXTENSION(ElongationPreview))
/**
  Expand or collapse the cell.
  \param value true if the cell must be expanded

  \param animated should it be animated

*/
- (void)expand:(BOOL)value animated:(BOOL)animated completion:(void (^ _Nullable)(BOOL))completion;
/**
  Apply dark overlay above the cell.
  \param value true if the cell must be dimmed

  \param animated should it be animated

*/
- (void)dim:(BOOL)value animated:(BOOL)animated;
@end


@interface ElongationCell (SWIFT_EXTENSION(ElongationPreview))
/**
  :nodoc:
*/
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end

@class UIGestureRecognizer;
@class NSBundle;

/**
  UITableViewController subclass.
  Base class for \code
  ElongationViewController
  \endcode & \code
  ElongationDetailViewController
  \endcode.
*/
SWIFT_CLASS("_TtC17ElongationPreview27SwipableTableViewController")
@interface SwipableTableViewController : UITableViewController <UIGestureRecognizerDelegate>
/**
  :nodoc:
*/
- (void)viewDidLoad;
/**
  :nodoc:
*/
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer;
- (nonnull instancetype)initWithStyle:(UITableViewStyle)style OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class ElongationHeader;

/**
  UITableViewController subclass.
  This is the \code
  detail
  \endcode view controller which can be used for display some details for objects from \code
  root
  \endcode.
*/
SWIFT_CLASS("_TtC17ElongationPreview30ElongationDetailViewController")
@interface ElongationDetailViewController : SwipableTableViewController
/**
  Actually this is \code
  expanded
  \endcode copy of \code
  ElongationCell
  \endcode.
*/
@property (nonatomic, strong) ElongationHeader * _Null_unspecified headerView;
- (nonnull instancetype)initWithStyle:(UITableViewStyle)style OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface ElongationDetailViewController (SWIFT_EXTENSION(ElongationPreview))
/**
  :nodoc:
*/
- (void)viewDidAppear:(BOOL)animated;
@end


@interface ElongationDetailViewController (SWIFT_EXTENSION(ElongationPreview))
@end

@class UITableView;

@interface ElongationDetailViewController (SWIFT_EXTENSION(ElongationPreview))
/**
  :nodoc:
*/
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForHeaderInSection:(NSInteger)section;
/**
  :nodoc:
*/
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForHeaderInSection:(NSInteger)section;
@end


/**
  Expanded copy of \code
  ElongationCell
  \endcode.
*/
SWIFT_CLASS("_TtC17ElongationPreview16ElongationHeader")
@interface ElongationHeader : UIView
/**
  Container of all the subviews.
*/
@property (nonatomic, strong) UIView * _Nonnull contentView;
/**
  View on top half of \code
  contentView
  \endcode.
  Add here all the views which wont be scaled and must stay on their position.
*/
@property (nonatomic, strong) UIView * _Null_unspecified topView;
/**
  This is the front view which can be scaled if \code
  scaleFactor
  \endcode was configured in \code
  ElongationConfig
  \endcode.
  Also to this view can be applied ‘parallax’ effect.
*/
@property (nonatomic, strong) UIView * _Null_unspecified scalableView;
/**
  The view which comes from behind the cell when you tap on the cell.
*/
@property (nonatomic, strong) UIView * _Null_unspecified bottomView;
/**
  \code
  top
  \endcode constraint of \code
  bottomView
  \endcode.
*/
@property (nonatomic, strong) NSLayoutConstraint * _Null_unspecified bottomViewTopConstraint;
/**
  :nodoc:
*/
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/**
  :nodoc:
*/
- (void)layoutSubviews;
/**
  :nodoc:
*/
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/**
  Provides transition animations between \code
  ElongationViewController
  \endcode & \code
  ElongationDetailViewController
  \endcode.
*/
SWIFT_CLASS("_TtC17ElongationPreview20ElongationTransition")
@interface ElongationTransition : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface ElongationTransition (SWIFT_EXTENSION(ElongationPreview))
@end


@interface ElongationTransition (SWIFT_EXTENSION(ElongationPreview))
@end

@protocol UIViewControllerContextTransitioning;

@interface ElongationTransition (SWIFT_EXTENSION(ElongationPreview)) <UIViewControllerAnimatedTransitioning>
/**
  :nodoc:
*/
- (NSTimeInterval)transitionDuration:(id <UIViewControllerContextTransitioning> _Nullable)transitionContext;
/**
  :nodoc:
*/
- (void)animateTransition:(id <UIViewControllerContextTransitioning> _Nonnull)transitionContext;
@end


/**
  UITableViewController subclass.
  This is the \code
  root
  \endcode view controller which displays vertical stack of cards.
  Each card in stack can be expanded.
*/
SWIFT_CLASS("_TtC17ElongationPreview24ElongationViewController")
@interface ElongationViewController : SwipableTableViewController
/**
  \code
  IndexPath
  \endcode of expanded cell.
*/
@property (nonatomic, copy) NSIndexPath * _Nullable expandedIndexPath;
/**
  Should cell change it’s state to \code
  expand
  \endcode on tap.
  Default value: \code
  true
  \endcode
*/
@property (nonatomic) BOOL shouldExpand;
- (nonnull instancetype)initWithStyle:(UITableViewStyle)style OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface ElongationViewController (SWIFT_EXTENSION(ElongationPreview))
/**
  :nodoc:
*/
- (void)viewDidLoad;
/**
  :nodoc:
*/
- (void)viewWillAppear:(BOOL)animated;
@end

@class UIViewController;

@interface ElongationViewController (SWIFT_EXTENSION(ElongationPreview)) <UIViewControllerTransitioningDelegate>
/**
  This transition object will be used while dismissing \code
  ElongationDetailViewController
  \endcode.
*/
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForDismissedController:(UIViewController * _Nonnull)dismissed;
/**
  This transition object will be used while presenting \code
  ElongationDetailViewController
  \endcode.
*/
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForPresentedController:(UIViewController * _Nonnull)presented presentingController:(UIViewController * _Nonnull)presenting sourceController:(UIViewController * _Nonnull)source;
@end

@class UIPreviewInteraction;

@interface ElongationViewController (SWIFT_EXTENSION(ElongationPreview)) <UIPreviewInteractionDelegate>
/**
  :nodoc:
*/
- (void)previewInteractionDidCancel:(UIPreviewInteraction * _Nonnull)previewInteraction;
/**
  :nodoc:
*/
- (void)previewInteraction:(UIPreviewInteraction * _Nonnull)previewInteraction didUpdatePreviewTransition:(CGFloat)transitionProgress ended:(BOOL)ended;
/**
  :nodoc:
*/
- (void)previewInteraction:(UIPreviewInteraction * _Nonnull)previewInteraction didUpdateCommitTransition:(CGFloat)transitionProgress ended:(BOOL)ended;
@end


@interface ElongationViewController (SWIFT_EXTENSION(ElongationPreview))
@end

@class UIScrollView;

@interface ElongationViewController (SWIFT_EXTENSION(ElongationPreview))
/**
  Must call \code
  super
  \endcode if you override this method in subclass.
*/
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/**
  :nodoc:
*/
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/**
  :nodoc:
*/
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/**
  Must call \code
  super
  \endcode if you override this method in subclass.
*/
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
@end


@interface ElongationViewController (SWIFT_EXTENSION(ElongationPreview))
/**
  Collapse expanded cell.
  \param animated should animate changing tableView’s frame.

*/
- (void)collapseCellsWithAnimated:(BOOL)animated;
/**
  Expand cell at given \code
  IndexPath
  \endcode.
  View must be in \code
  normal
  \endcode state.
  \param indexPath IndexPath of target cell

*/
- (void)expandCellAt:(NSIndexPath * _Nonnull)indexPath;
/**
  Present modal view controller for cell at given \code
  IndexPath
  \endcode.
  \param indexPath IndexPath of source cell.

*/
- (void)openDetailViewFor:(NSIndexPath * _Nonnull)indexPath;
/**
  Expand given \code
  ElongationDetailViewController
  \endcode
  \param viewController \code
  ElongationDetailViewController
  \endcode subclass which will be added to view hierarchy.

  \param animated Should the transition be animated.

  \param completion Optional callback which will be called when transition completes.

*/
- (void)expandWithViewController:(ElongationDetailViewController * _Nonnull)viewController animated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
@end



@interface UICollectionView (SWIFT_EXTENSION(ElongationPreview))
@end


@interface UITableView (SWIFT_EXTENSION(ElongationPreview))
@end

#pragma clang diagnostic pop
